class Foo : Bar, IFoo, IBar {
    private baz: String?

    // Classes are boxed, so their properties MUST be boxed.
    // The analyzer should throw an error if a primitive is used.
    new(public foo: Int, private final bar: Bar)

    // Constructor bodies are optional.
    // However, they can obviously perform actions:
    new() {
        // Do something...
    }

    // No return type declared, infers boxed "Int"
    doIt() => 34

    // In this case, "void" is inferred
    doIt() {}

    // Getters must have a return type, because you can't return "void".
    //
    // Internally, though, this just becomes a method like "get_xyz" in the
    // virtual method table.
    //
    // The strategy for compiling this should be to treat *every* property
    // as a getter-setter pair. However, also track whether the pair is
    // ever overridden, AND if they are "implicit" (auto-generated).
    //
    // This will make sure that property access is always fast as possible.
    get xyz : Int {
        return 34

        // Compiles to something like:
        // Foo_getxyz:
        //   mov eax, 34
        //   call Manda_BoxInt
        //   ret
    }

    // Setters' return types don't matter.
    set_xyz: void {}

    // You can define casts.
    from bool => Foo()

    to bool => false
}