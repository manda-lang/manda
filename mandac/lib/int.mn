/**
 * The boxed implementation of an integer.
 */
class Int {
    new(final private value: int)

    operator !=(other: Int) => !(this == other)

    operator ==(other: Int) => other.value == value

    operator <(other: Int) => other.value < value

    operator <=(other: Int) => other.value <= value

    operator >(other: Int) => other.value > value

    operator >=(other: Int) => other.value >= value

    operator ^(other: Int) => Int(value ^ other.value)

    operator &(other: Int) => Int(value & other.value)

    operator |(other: Int) => Int(value | other.value)

    operator *(other: Int) => Int(value * other.value)

    operator ~/(other: Int) => Int(value ~/ other.value)

    operator /(other: Int) => Double(value / other.value)

    operator %(other: Int) => Int(value % other.value)

    operator +(other: Int) => Int(value + other.value)

    operator -(other: Int) => Int(value - other.value)

    get isNegative => value < 0

    get isPositive => value > 0

    abs() => Int(value > 0 ? value : (-1 * value))

    // TODO: Need a smart way to return the primitive value instead
    to Double => Double(value * 1.0)

    to String {
        var buf = StringBuffer()
        var v = abs().value

        if (value < 0) buf.write('-')

        while

        // TODO: The rest
    }
}