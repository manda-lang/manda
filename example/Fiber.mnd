with Async

func fibonacci(x: Num): Num {
  if (x <= 1) {
    return x
  } else {
    return fibonacci(x - 1) + fibonacci(x - 2)
  }
}

func fiberMain(ctx: FiberContext):void {
  // Retrieve the data sent to this fiber.
  let x = ctx.message as Num
  let fib = fibonacci(x)
  
  // Mark this fiber as successful; it will eventually be disposed.
  ctx.result = x
  ctx.join()
}

// Start an asynchronous execution context, in which we compute
// a Fibonacci number.
let fiber = Fiber(fiberMain, message: 13)

// We can listen until the fiber is marked complete.
fiber.onComplete.listen(func (result: Num) {
  print('Computed: %result!')
})

